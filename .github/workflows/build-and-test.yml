name: Build and Test

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/documentation.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  COVERAGE_TARGET: Stubby
  SPM_PACKAGE_RESOLVED_PATH: Package.resolved
  XCODE_CLONED_SOURCE_PACKAGES_DIR_PATH: build/SourcePackages
  XCODE_DERIVED_DATA_PATH: build
  XCODE_DESTINATION_IOS: platform=iOS Simulator,name=iPhone 16,OS=18.6
  XCODE_DESTINATION_MACOS: platform=macOS
  XCODE_SCHEME: Stubby
  XCODE_VERSION: 16.4
 
jobs:
  build:
    name: Build and Test
    runs-on: macos-15
    strategy:
      matrix:
        destination: ['iOS', 'macOS']
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - uses: actions/cache@v4
        name: "Cache SPM Dependencies"
        with:
          path: ${{ env.XCODE_CLONED_SOURCE_PACKAGES_DIR_PATH }}
          key: spm-dependencies-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles(env.SPM_PACKAGE_RESOLVED_PATH) }}
          restore-keys: |
            spm-dependencies-${{ runner.os }}-${{ runner.arch }}-

      - name: Set Xcode destination for run
        id: set-xcode-destination
        run: |
          if [ "${{ matrix.destination }}" == "iOS" ]; then
            echo "destination=${{ env.XCODE_DESTINATION_IOS }}" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.destination }}" == "macOS" ]; then
            echo "destination=${{ env.XCODE_DESTINATION_MACOS }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build
        run: |
          set -o pipefail && \
          xcodebuild build-for-testing \
          -scheme "${{ env.XCODE_SCHEME }}" \
          -destination "${{ steps.set-xcode-destination.outputs.destination }}" \
          -derivedDataPath "${{ env.XCODE_DERIVED_DATA_PATH }}" \
          -testProductsPath "${{ env.XCODE_SCHEME }}-${{ matrix.destination }}.xctestproducts" \
          -skipPackagePluginValidation \
          | xcbeautify --renderer github-actions

      - name: Save test products
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.XCODE_SCHEME }}-${{ matrix.destination }}.xctestproducts"
          path: "${{ env.XCODE_SCHEME }}-${{ matrix.destination }}.xctestproducts"
      
      - name: Test
        id: test
        run: |  
          set -o pipefail && \
          xcodebuild test-without-building \
          -testProductsPath "${{ env.XCODE_SCHEME }}-${{ matrix.destination }}.xctestproducts" \
          -destination "${{ steps.set-xcode-destination.outputs.destination }}" \
          -derivedDataPath "${{ env.XCODE_DERIVED_DATA_PATH }}" \
          -resultBundlePath "${{ env.XCODE_SCHEME }}-${{ matrix.destination }}.xcresult" \
          -enableCodeCoverage YES \
          | xcbeautify --renderer github-actions

      - name: Save test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.XCODE_SCHEME }}-${{ matrix.destination }}.xcresult"
          path: "${{ env.XCODE_SCHEME }}-${{ matrix.destination }}.xcresult"

      - name: Save logs
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.XCODE_SCHEME }}-${{ matrix.destination }}-Logs.txt"
          path: ${{ env.XCODE_DERIVED_DATA_PATH }}/Logs

      - name: Save crash logs
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.XCODE_SCHEME }}-${{ matrix.destination }}-Crash Logs.txt"
          path: ~/Library/Logs/DiagnosticReports

      - name: Prepare Code Coverage
        id: prepare-codecov-coverage-report
        if: steps.test.outcome == 'success'
        continue-on-error: true
        run: |
          set -o pipefail && \
          xcrun llvm-cov export \
          -format="lcov" \
          --ignore-filename-regex='(Tests|Mocks)[/\\].*' \
          -instr-profile=$(find ${{ env.XCODE_DERIVED_DATA_PATH }}/Build -name Coverage.profdata) \
          $(find ${{ env.XCODE_SCHEME }}-${{ matrix.destination }}.xctestproducts/Binaries -name ${{ env.COVERAGE_TARGET }} -type f -perm +111) \
          > info.lcov

      - name: Upload coverage to Codecov
        if: steps.prepare-codecov-coverage-report.outcome == 'success'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.destination }}
